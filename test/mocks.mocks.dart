// Mocks generated by Mockito 5.4.4 from annotations
// in airops_frontend/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i10;

import 'package:airops_frontend/models/class.dart' as _i5;
import 'package:airops_frontend/models/game.dart' as _i8;
import 'package:airops_frontend/models/modality.dart' as _i7;
import 'package:airops_frontend/models/profile.dart' as _i9;
import 'package:airops_frontend/models/user.dart' as _i6;
import 'package:airops_frontend/services/api/api_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i2.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<bool> checkEmail(String? email) => (super.noSuchMethod(
        Invocation.method(
          #checkEmail,
          [email],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i5.Class>> fetchClasses() => (super.noSuchMethod(
        Invocation.method(
          #fetchClasses,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Class>>.value(<_i5.Class>[]),
      ) as _i4.Future<List<_i5.Class>>);

  @override
  _i4.Future<void> updateUser(_i6.User? user) => (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.User>> fetchUsers() => (super.noSuchMethod(
        Invocation.method(
          #fetchUsers,
          [],
        ),
        returnValue: _i4.Future<List<_i6.User>>.value(<_i6.User>[]),
      ) as _i4.Future<List<_i6.User>>);

  @override
  _i4.Future<List<_i7.Modality>> fetchModalities() => (super.noSuchMethod(
        Invocation.method(
          #fetchModalities,
          [],
        ),
        returnValue: _i4.Future<List<_i7.Modality>>.value(<_i7.Modality>[]),
      ) as _i4.Future<List<_i7.Modality>>);

  @override
  _i4.Future<List<_i8.Game>> fetchAdminGames() => (super.noSuchMethod(
        Invocation.method(
          #fetchAdminGames,
          [],
        ),
        returnValue: _i4.Future<List<_i8.Game>>.value(<_i8.Game>[]),
      ) as _i4.Future<List<_i8.Game>>);

  @override
  _i4.Future<Map<String, dynamic>> fetchProfile() => (super.noSuchMethod(
        Invocation.method(
          #fetchProfile,
          [],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<bool> updateProfile(_i9.Profile? profile) => (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [profile],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<Map<String, dynamic>> register({
    required String? email,
    required String? password,
    required String? name,
    required String? nickname,
    required String? city,
    required String? phone,
    required int? idClasseOperador,
    required List<int>? modalityIds,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
          {
            #email: email,
            #password: password,
            #name: name,
            #nickname: nickname,
            #city: city,
            #phone: phone,
            #idClasseOperador: idClasseOperador,
            #modalityIds: modalityIds,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<bool> changePassword(String? newPassword) => (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [newPassword],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> clearToken() => (super.noSuchMethod(
        Invocation.method(
          #clearToken,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
